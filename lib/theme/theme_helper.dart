import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              10,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.primary,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              10,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(
            colorScheme.onPrimary.withOpacity(1)),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        checkColor: MaterialStateProperty.all<Color>(
            colorScheme.onPrimary.withOpacity(1)),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(0.59),
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            10,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            18,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            8,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0X7FFFFFFF),
    error: Color(0X7FFFFFFF),
    errorContainer: Color(0X75FF1863),
    inversePrimary: Color(0X7FFFFFFF),
    inverseSurface: Color(0X7FFFFFFF),
    onBackground: Color(0XFF112950),
    onError: Color(0XFF112950),
    onErrorContainer: Color(0X7FFFFFFF),
    onInverseSurface: Color(0XFF112950),
    onPrimary: Color(0X7FFFFFFF),
    onPrimaryContainer: Color(0XFF112950),
    onSecondary: Color(0XFF112950),
    onSecondaryContainer: Color(0X7FFFFFFF),
    onSurface: Color(0XFF112950),
    onSurfaceVariant: Color(0X7FFFFFFF),
    onTertiary: Color(0XFF112950),
    onTertiaryContainer: Color(0X7FFFFFFF),
    outline: Color(0X7FFFFFFF),
    outlineVariant: Color(0X7FFFFFFF),
    primary: Color(0XFFFF1863),
    primaryContainer: Color(0X7FFFFFFF),
    scrim: Color(0X7FFFFFFF),
    secondary: Color(0X7FFFFFFF),
    secondaryContainer: Color(0X75FF1863),
    shadow: Color(0X7FFFFFFF),
    surface: Color(0X7FFFFFFF),
    surfaceTint: Color(0X7FFFFFFF),
    surfaceVariant: Color(0X75FF1863),
    tertiary: Color(0X7FFFFFFF),
    tertiaryContainer: Color(0X75FF1863),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);
  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFCDCDCD);
  Color get blueGray400 => Color(0XFF868686);
  Color get blueGray40001 => Color(0XFF888888);
  // DeepOrange
  Color get deepOrange200 => Color(0XFFFEB099);
  Color get deepOrange300 => Color(0XFFFD7C56);
  Color get deepOrange600 => Color(0XFFF45B0F);
  Color get deepOrangeA200 => Color(0XFFFD6234);
  // Gray
  Color get gray100 => Color(0XFFF2F4F5);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray400 => Color(0XFFB3B6B7);
  Color get gray500 => Color(0XFF949494);
  Color get gray900 => Color(0XFF0E1934);
  // Grayf
  Color get gray9003f => Color(0X3F181818);
  // Indigo
  Color get indigoA100 => Color(0XFF8094FF);
  // Orange
  Color get orange200 => Color(0XFFF7C480);
  // Pink
  Color get pink50 => Color(0XFFFCDDEC);
  Color get pink500 => Color(0XFFF32F5F);
  // Purple
  Color get purple500 => Color(0XFF8727D1);
  // Red
  Color get red100 => Color(0XFFFFE0D6);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
